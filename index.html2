<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ultimate Image Compressor</title>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            min-height: 100vh;
        }
        #app {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            padding: 20px;
            width: 100%;
            max-width: 800px;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 20px;
        }
        #dropZone {
            border: 3px dashed #3498db;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            background: #ecf0f1;
            border-radius: 10px;
            transition: all 0.3s ease;
        }
        #dropZone.dragover {
            background: #3498db;
            color: white;
            border-color: #2980b9;
        }
        #options {
            margin: 20px 0;
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        #options label {
            flex: 1 1 45%;
            display: flex;
            flex-direction: column;
            font-size: 14px;
            color: #34495e;
        }
        #options input, #options select {
            margin-top: 5px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        #previewContainer {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
            margin: 20px 0;
        }
        .previewItem {
            background: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }
        .previewItem img {
            max-width: 100%;
            border-radius: 5px;
        }
        #progress {
            width: 100%;
            height: 10px;
            background: #ddd;
            border-radius: 5px;
            overflow: hidden;
            display: none;
        }
        #progressBar {
            height: 100%;
            background: #2ecc71;
            width: 0;
            transition: width 0.3s ease;
        }
        #compressBtn, #downloadAllBtn {
            padding: 12px 25px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
        }
        #compressBtn {
            background: #e74c3c;
            color: white;
        }
        #compressBtn:hover {
            background: #c0392b;
        }
        #downloadAllBtn {
            background: #2ecc71;
            color: white;
            display: none;
        }
        #downloadAllBtn:hover {
            background: #27ae60;
        }
        #history {
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
            border-top: 1px solid #eee;
            padding-top: 10px;
        }
        #history div {
            padding: 5px 0;
            font-size: 14px;
            color: #7f8c8d;
        }
    </style>
</head>
<body>
    <div id="app">
        <h1>Ultimate Image Compressor</h1>
        <div id="dropZone">Drag & Drop Images or Click to Upload</div>
        <input type="file" id="fileInput" accept="image/*" multiple style="display: none;">
        <div id="options">
            <label>JPEG Quality (0-100): <input type="range" id="jpegQuality" min="0" max="100" value="70"></label>
            <label>PNG Optimization: <select id="pngLevel"><option value="0">None</option><option value="1">Low</option><option value="2">High</option></select></label>
            <label>Max Width: <input type="number" id="maxWidth" min="1" placeholder="Optional"></label>
            <label>Max Height: <input type="number" id="maxHeight" min="1" placeholder="Optional"></label>
        </div>
        <div id="previewContainer"></div>
        <div id="progress"><div id="progressBar"></div></div>
        <button id="compressBtn">Compress Images</button>
        <button id="downloadAllBtn">Download All</button>
        <div id="history"></div>
    </div>

    <script>
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const previewContainer = document.getElementById('previewContainer');
        const jpegQuality = document.getElementById('jpegQuality');
        const pngLevel = document.getElementById('pngLevel');
        const maxWidth = document.getElementById('maxWidth');
        const maxHeight = document.getElementById('maxHeight');
        const compressBtn = document.getElementById('compressBtn');
        const downloadAllBtn = document.getElementById('downloadAllBtn');
        const progress = document.getElementById('progress');
        const progressBar = document.getElementById('progressBar');
        const history = document.getElementById('history');
        let files = [], compressedFiles = [];

        dropZone.addEventListener('click', () => fileInput.click());
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('dragover');
        });
        dropZone.addEventListener('dragleave', () => dropZone.classList.remove('dragover'));
        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            handleFiles(e.dataTransfer.files);
        });
        fileInput.addEventListener('change', (e) => handleFiles(e.target.files));

        compressBtn.addEventListener('click', compressAllImages);
        downloadAllBtn.addEventListener('click', downloadAll);

        function handleFiles(fileList) {
            files = Array.from(fileList).filter(file => file.type.startsWith('image/'));
            previewContainer.innerHTML = '';
            files.forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const div = document.createElement('div');
                    div.className = 'previewItem';
                    div.innerHTML = `<img src="${e.target.result}"><p>${file.name} (${(file.size / 1024).toFixed(2)} KB)</p>`;
                    previewContainer.appendChild(div);
                };
                reader.readAsDataURL(file);
            });
            compressBtn.style.display = files.length ? 'inline-block' : 'none';
        }

        async function compressAllImages() {
            compressedFiles = [];
            progress.style.display = 'block';
            const total = files.length;
            for (let i = 0; i < total; i++) {
                const file = files[i];
                const blob = await compressImage(file);
                compressedFiles.push({ name: file.name, blob });
                progressBar.style.width = `${((i + 1) / total) * 100}%`;
                logHistory(`${file.name}: ${(file.size / 1024).toFixed(2)} KB -> ${(blob.size / 1024).toFixed(2)} KB`);
            }
            progress.style.display = 'none';
            downloadAllBtn.style.display = 'inline-block';
        }

        function compressImage(file) {
            return new Promise((resolve) => {
                const img = new Image();
                const reader = new FileReader();
                reader.onload = (e) => {
                    img.src = e.target.result;
                    img.onload = () => {
                        const canvas = document.createElement('canvas');
                        let { width, height } = img;
                        const mw = maxWidth.value ? parseInt(maxWidth.value) : width;
                        const mh = maxHeight.value ? parseInt(maxHeight.value) : height;
                        if (width > mw || height > mh) {
                            const ratio = Math.min(mw / width, mh / height);
                            width *= ratio;
                            height *= ratio;
                        }
                        canvas.width = width;
                        canvas.height = height;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, width, height);
                        const type = file.type === 'image/png' ? 'image/png' : 'image/jpeg';
                        const quality = type === 'image/jpeg' ? jpegQuality.value / 100 : (pngLevel.value === '2' ? 0.8 : pngLevel.value === '1' ? 0.9 : 1);
                        canvas.toBlob(resolve, type, quality);
                    };
                };
                reader.readAsDataURL(file);
            });
        }

        function downloadAll() {
            compressedFiles.forEach(({ name, blob }) => {
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `compressed_${name}`;
                a.click();
                URL.revokeObjectURL(url);
            });
        }

        function logHistory(message) {
            const div = document.createElement('div');
            div.textContent = `${new Date().toLocaleTimeString()} - ${message}`;
            history.insertBefore(div, history.firstChild);
        }
    </script>
</body>
</html>
